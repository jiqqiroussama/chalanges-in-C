#include <stdio.h>
#include <string.h>

#define maximum_de_reservations 1000
#define max_status 4


const char *statuses[] = {"valide", "reporte", "annule", "traite"};


typedef struct {
    char reference[10];
    char nom[50];
    char prenom[50];
    char telephone[20];
    int age;
    int statut;  
    char date[12];  
} Reservation;

Reservation reservations[maximum_de_reservations];
int totalReservations = 0;


void insererParDefaut();
void ajouterReservation();
void afficherReservation(Reservation res);
void afficherToutesReservations();
void modifierReservation();
void supprimerReservation();
void afficherStatistiques();
void triDesResrvations();
void rechercheDesReservations();
int rechercherReservationParReference(char reference[]);


int getchoice(int min, int max) {
    int choice;
    while (1) {
        printf("\nEntrez votre choix (%d-%d): ", min, max);
        if (scanf("%d", &choice) == 1 && choice >= min && choice <= max) { 
            getchar();
            return choice;
        } else {
            printf("Erreur, Entrez un choix valide.\n");
            while (getchar() != '\n');
        }
    }
}

int main() {
    int choix;

   
    insererParDefaut();

    do {
       
        printf("  __________________________________________\n");
        printf(" |                 MENU :                   |\n");
        printf(" |__________________________________________|\n");
        printf(" | 1- Ajouter une reservation               |\n");
        printf(" | 2- Modifier une reservation              |\n");
        printf(" | 3- Supprimer une reservation             |\n");
        printf(" | 4- Afficher les details des reservations |\n");
        printf(" | 5- Afficher les statistiques             |\n");
        printf(" | 6- Recherche des reservations            |\n");
        printf(" | 7- Tri des reservations                  |\n");
        printf(" | 8- Quitter                               |\n");
        printf(" |__________________________________________|\n");
        printf(" | Entrez votre choix :                     |\n");
        printf(" |__________________________________________|\n");
        scanf("%d", &choix);

        switch (choix) {
            case 1:
                ajouterReservation();
                break;
            case 2:
                modifierReservation();
                break;
            case 3:
                supprimerReservation();
                break;
            case 4:
                afficherToutesReservations();
                break;
            case 5:
                afficherStatistiques();
                break;
            case 6:
                rechercheDesReservations();
                break;   
                
            case 7 :
            triDesReservations();
            break;
           
            case 8:
                printf("a bientot \n");
                break;
            default:
                printf("Choix n`est pas disponible  \n");
        }
    } while (choix != 8);

    return 0;
}


void insererParDefaut() {
    for (int i = 0; i < 10; i++) {
        snprintf(reservations[i].reference, 10, "%d", i + 1);
        snprintf(reservations[i].nom, 50, "nom de client-%d", i + 1);
        snprintf(reservations[i].prenom, 50, "Prenom de client-%d", i + 1);
        snprintf(reservations[i].telephone, 20, "062374584%d", i + 1);
        reservations[i].age = 18 + i;
        reservations[i].statut = i % max_status;
        snprintf(reservations[i].date, 12, "07-11-2024", i % 3);
        totalReservations++;
    }
}


void ajouterReservation() {
    if (totalReservations >= maximum_de_reservations) {
        printf("pas d`espace pour une autre reservation  \n");
        return;
    }

    Reservation res;
    printf("Entrez le nom : ");
    scanf("%s", res.nom);
    printf("Entrez le prenom : ");
    scanf("%s", res.prenom);
    printf("Entrez le telephone : ");
    scanf("%s", res.telephone);
    printf("Entrez l'age : ");
    scanf("%d", &res.age);
    printf("Entrez le statut (0- valide, 1- reporte, 2- annule, 3- traite) : ");
    scanf("%d", &res.statut);
    printf("Entrez la date de reservation (JJ-MM-AAAA) : ");
    scanf("%s", res.date);

    snprintf(res.reference, 10, "%d", totalReservations + 1);
    reservations[totalReservations++] = res;

    printf("Reservation bien ajoutee,et leur Reference c`est : %s\n", res.reference);
}


void afficherReservation(Reservation res) {
    printf("\nReference: %s\n", res.reference);
    printf("Nom: %s\n", res.nom);
    printf("Prenom: %s\n", res.prenom);
    printf("Telephone: %s\n", res.telephone);
    printf("Age: %d\n", res.age);
    printf("Statut: %s\n", statuses[res.statut]);
    printf("Date de reservation: %s\n", res.date);
}


void afficherToutesReservations() {
    if (totalReservations == 0) {
        printf("Aucune reservation Mr,Mme :( \n");
    } else {
        for (int i = 0; i < totalReservations; i++) {
            afficherReservation(reservations[i]);
        }
    }
}


void modifierReservation() {
    char ref[10];
    printf("Entrer la reference de la reservation que tu veux modifier : ");
    scanf("%s", ref);

    int index = rechercherReservationParReference(ref);
    if (index == -1) {
        printf("  \n");
        return;
    }

    Reservation *res = &reservations[index];
    printf("Modification de la reservation %s\n", res->reference);
    printf("Entrer le nouveau nom : ");
    scanf("%s", res->nom);
    printf("Entrer le nouveau prÃ©nom : ");
    scanf("%s", res->prenom);
    printf("Entrer le nouveau telephone : ");
    scanf("%s", res->telephone);
    printf("Entrer le nouvel age : ");
    scanf("%d", &res->age);
    printf("Entrer le nouveau statut (0: valide, 1: reporte, 2: annule, 3: traite) : ");
    scanf("%d", &res->statut);
    printf("Entrer la nouvelle date de reservation (JJ-MM-AAAA) : ");
    scanf("%s", res->date);

    printf("reservation bien modifiee :) \n");
}


void supprimerReservation() {
    char ref[10];
    printf("Entrer la reference de la reservation que tu veux  supprimer : ");
    scanf("%s", ref);

    int index = rechercherReservationParReference(ref);
    if (index == -1) {
        printf("Reservation non trouvee\n");
        return;
    }


    for (int i = index; i < totalReservations - 1; i++) {
        reservations[i] = reservations[i + 1];
    }

    totalReservations--;
    printf("la reservation supprimee\n");
}


int rechercherReservationParReference(char reference[]) {
    for (int i = 0; i < totalReservations; i++) {
        if (strcmp(reservations[i].reference, reference) == 0) {
            return i;
        }
    }
    return -1;
}


void afficherStatistiques() {
    if (totalReservations == 0) {
        printf("Aucune reservation disponible pour  maintenant\n");
        return;
    }

    int totalage = 0;
    int agedegroups[3] = {0};  
    int statuscounts[max_status] = {0};

    for (int i = 0; i < totalReservations; i++) {
        totalage += reservations[i].age;

        
        if (reservations[i].age <= 18) {
            agedegroups[0]++;
        } else if (reservations[i].age <= 35) {
            agedegroups[1]++;
        } else {
            agedegroups[2]++;
        }

        
        statuscounts[reservations[i].statut]++;
    }

   
    float averageAge = (float) totalage / totalReservations;

    printf("\n---------- Statistiques ---------\n");
    printf("Age moyen des patients: %.2f ans\n", averageAge);
    printf("Nombre de patients par tranche d'age:\n");
    printf("  0-18 ans: %d\n", agedegroups[0]);
    printf("  19-35 ans: %d\n", agedegroups[1]);
    printf("  36+ ans: %d\n", agedegroups[2]);

    printf("Nombre total de reservations par statut:\n");
    for (int i = 0; i < max_status; i++) {
        printf("  %s: %d\n", statuses[i], statuscounts[i]);
    }
}

void echangerReservations(Reservation *a, Reservation *b) {
    Reservation temp = *a;
    *a = *b;
    *b = temp;
}


void trierParNom() {
    for (int i = 0; i < totalReservations - 1; i++) {
        for (int j = 0; j < totalReservations - i - 1; j++) {
            if (strcmp(reservations[j].nom, reservations[j + 1].nom) > 0) {
                echangerReservations(&reservations[j], &reservations[j + 1]);
            }
        }
    }
    printf("La reservations est triee par nom :) \n");
}


void trierParDate() {
    for (int i = 0; i < totalReservations - 1; i++) {
        for (int j = 0; j < totalReservations - i - 1; j++) {
            if (strcmp(reservations[j].date, reservations[j + 1].date) > 0) {
                echangerReservations(&reservations[j], &reservations[j + 1]);
            }
        }
    }
    printf("La reservations est triee par date :)\n");
}


void trierParStatut() {
    for (int i = 0; i < totalReservations - 1; i++) {
        for (int j = 0; j < totalReservations - i - 1; j++) {
            if (reservations[j].statut > reservations[j + 1].statut) {
                echangerReservations(&reservations[j], &reservations[j + 1]);
            }
        }
    }
    printf("La reservations est triee par statut :) \n");
}

void rechercherParNom(char nom[]) {
    int trouve = 0;
    for (int i = 0; i < totalReservations; i++) {
        if (strcmp(reservations[i].nom, nom) == 0) {
            afficherReservation(reservations[i]);
            trouve = 1;
        }
    }
    if (!trouve) {
        printf("Aucune reservation trouvee par ce nom: %s\n", nom);
    }
}


void rechercherParDate(char date[]) {
    int trouve = 0;
    for (int i = 0; i < totalReservations; i++) {
        if (strcmp(reservations[i].date, date) == 0) {
            afficherReservation(reservations[i]);
            trouve = 1;
        }
    }
    if (!trouve) {
        printf("Aucune reservation trouvee par  date :( %s\n", date);
    }
}


void rechercherParStatut(int statut) {
    int trouve = 0;
    for (int i = 0; i < totalReservations; i++) {
        if (reservations[i].statut == statut) {
            afficherReservation(reservations[i]);
            trouve = 1;
        }
    }
    if (!trouve) {
        printf("Aucune reservation trouvee par le statut: %s\n", statuses[statut]);
    }
}
void rechercheDesReservations() {
    int choixRecherche;
    char nom[50], date[12];
    int statut;

    printf("Choisissez un critÃ¨re de recherche:\n");
    printf("1- Par nom\n");
    printf("2- Par date\n");
    printf("3- Par statut\n");
    scanf("%d", &choixRecherche);

    switch (choixRecherche) {
        case 1:
            printf("Entrez le nom: ");
            scanf("%s", nom);
            rechercherParNom(nom);
            break;
        case 2:
            printf("Entrez la date (JJ-MM-AAAA): ");
            scanf("%s", date);
            rechercherParDate(date);
            break;
        case 3:
            printf("Entrez le statut (0- valide, 1- reporte, 2- annule, 3- traite): ");
            scanf("%d", &statut);
            rechercherParStatut(statut);
            break;
        default:
            printf("Choix non valide.\n");
    }
}
void triDesReservations() {
    int choixTri;
    printf("Choisissez un critÃ¨re de tri:\n");
    printf("1- Par nom\n");
    printf("2- Par date\n");
    printf("3- Par statut\n");

    
    choixTri = getchoice(1, 3);

    switch (choixTri) {
        case 1:
            trierParNom();
            break;
        case 2:
            trierParDate();
            break;
        case 3:
            trierParStatut();
            break;
        default:
            printf("Choix non valide.\n"); 
    }
}